const { ApolloServer, gql } = require('apollo-server-lambda')
const axios = require("axios")


var faunadb = require("faunadb")
q = faunadb.query

require("dotenv").config();
var adminClient = new faunadb.Client({ secret: process.env.FAUNADB_SERVER_SECRET })

const typeDefs = gql`
  type Query {
    hello: String
    getAllLollies: [Lolly]!
    GetLollyByLink(link: String!): Lolly
  }

  type Lolly {
    topColor: String!
    middleColor: String!
    bottomColor: String!
    toField: String!
    fromField: String!
    message: String!
    link: String!
  }

  type Mutation {
    addLolly(
      topColor: String!, 
      middleColor: String!, 
      bottomColor: String!, 
      toField: String!, 
      fromField: String!, 
      message: String!,
      link: String!,
      ): Lolly
  } 
`

const resolvers = {
  Query: {
    hello: () => {
      return 'Hello, world!'
    },
    getAllLollies: async () => {
      try {
        var adminClient = new faunadb.Client({ secret: process.env.FAUNADB_SERVER_SECRET })
        const result = await adminClient.query(
          q.Map(
            q.Paginate(q.Match(q.Index('allLollies'))),  //allLollies is index in faunadb
            q.Lambda(x => q.Get(x))
          )
        )
        // console.log(" result.data in vlolly function.js >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", result.data)
        return result.data.map(d => {
          return {
            link: d.data.link,
            topColor: d.data.topColor,
            middleColor: d.data.middleColor,
            bottomColor: d.data.bottomColor,
            toField: d.data.toField,
            fromField: d.data.fromField,
            message: d.data.message,
          }
        })
      } catch (err) {
        console.log("error from function:", err)
      }
    },
    GetLollyByLink: async (_, args) => {
      // console.log("Link>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>:", link)
      try {
        const result = await adminClient.query(
          q.Get(q.Match(q.Index("Lolly_by_path"), args.link))
        )
        // console.log(" result.data in GetLollyByLink query ==>>", result.data)
        return result.data
      } catch (err) {
        console.log("error from function>>>>>:", err)
        return err.toString()
      }
    },
  },
    Mutation:{
      addLolly: async (_, {topColor, middleColor,bottomColor,toField,fromField,message,link}) => {
          try{
          var adminClient = new faunadb.Client({secret: process.env.FAUNADB_SERVER_SECRET})
  
          const result = await adminClient.query(
            q.Create(
              q.Collection("LOLLIES"), {
              data: {
                topColor,
                middleColor,
                bottomColor,
                toField,
                fromField,
                message,
                link,   //id is generated by package shortid
              }
            }
            )
          )
          axios
            .post("https://api.netlify.com/build_hooks/6061aff8baa0359b9ca6a610")
            .then(function (response) {
              // console.log("response after posting data through axios >>>>>>>>>>>>>>>>>>>>>>: ", response)
            })
            .catch(function (error) {
              console.error(error)
            })
  
          console.log("result in add mutation >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", result)
          return result.data
        }
        catch (err) {
          console.log("error in mutation addLolly=====>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>======", err)
        }
  
      }
    }
  }

const server = new ApolloServer({
  typeDefs,
  resolvers,
})

exports.handler = server.createHandler()
